local circular = class("myvisualizer.circular") // you must use different class name for each visualizer

function circular:initialize(currentAudio,scrW,scrH)
    self.currentAudio = currentAudio
    self.fft = {}
    self.smoothFFT = {}
    
    self.logo = material.create("UnlitGeneric")
    self.logo:setTextureURL("$basetexture","https://raw.githubusercontent.com/NekerSqu4w/random_image/main/nouveau logo (comp).png",function(_,_,_,_,l) l(0,0,1024,1024) end)
    
    self.pi = math.pi
    self.pi2 = math.pi * 2
    
    self.lerp = math.lerp
    self.cos = math.cos
    self.sin = math.sin
    self.floor = math.floor
    self.round = math.round
    
    self.lowFreq = 0
    
    self.nextFFTUpdate = timer.curtime()
    
    return self
end

function circular:update(dt)
    self.fft = self.currentAudio.bassObj:getFFT(4)
    
    self.lowFreq = 0
    for i=1, 150 do
        self.smoothFFT[i] = self.lerp(dt * 15,self.smoothFFT[i] or 0,self.fft[i] or 0)
        
        if i <= 10 then self.lowFreq = self.lowFreq + self.smoothFFT[i] end
    end
    self.lowFreq = self.lowFreq / 10
end
    
function circular:renderScreen(x,y,scrW,scrH)
    local dt = timer.frametime()
    
    local size = scrW
    if scrH > size then size = scrH end
    size = size + self.lowFreq * 50
    
    render.setColor(Color(150,150,150))
    render.setMaterial(self.currentAudio.audioBackground)
    render.drawTexturedRect(scrW/2 - size/2,scrH/2 - size/2,size,size)
    
    local moveCircle = Matrix()
    moveCircle:translate(Vector(scrW/2,scrH/2))
    moveCircle:scale(Vector(1) * (0.2 + self.lowFreq * 0.15))
    render.pushMatrix(moveCircle)

    //audio visualizer
    render.setColor(Color(255,255,255,150))
    render.setMaterial()

    addRot = (addRot or 0) - dt * 25
    local ROT = self.floor(addRot)
    local detail = #self.smoothFFT
    for i=1, detail do
        local r = (self.smoothFFT[i % self.round(detail/4)] or 0) * 800
        
        local x = (512 + r / 2) * self.cos(((i+ROT)/detail) * self.pi2)
        local y = (512 + r / 2) * self.sin(((i+ROT)/detail) * self.pi2)
        
        render.drawTexturedRectRotated(x,y,30 + r,10,((i+ROT)/detail)*360)
    end

    //big icon
    render.setColor(Color(255,255,255))
    render.setMaterial(self.logo)
    render.texturedCircle(0,0,512,512,64)

    render.setMaterial()

    render.popMatrix()
end

function circular:renderHUD(x,y,scrW,scrH)
end

//executed only when switch to another visualizer
//can be usefull to remove render target
// note: this function are executed before replacing the current visualizer
function circular:on_visualizer_switch()
    self.logo:destroy()
end

//
function circular:on_song_change()
end

return circular