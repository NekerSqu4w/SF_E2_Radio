local tunnel = class("myvisualizer.tunnel") // you must use different class name for each visualizer

--@include lib/meshlib/mesh_lib.txt
--@includedata lib/myvisualizer_v2/tunnel.data/model/border_cylinder.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/neon_box.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/neon.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/blue neon.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/pipe.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/platform.obj
--@includedata lib/myvisualizer_v2/tunnel.data/model/ring.obj

--@includedata lib/myvisualizer_v2/tunnel.data/texture/tunnel baking.png
--@includedata lib/myvisualizer_v2/tunnel.data/texture/pipe baking.png
--@includedata lib/myvisualizer_v2/tunnel.data/texture/platform baking.png
--@includedata lib/myvisualizer_v2/tunnel.data/texture/ring baking.png
--@includedata lib/myvisualizer_v2/tunnel.data/texture/smoke.png

function tunnel:initialize(currentAudio,scrW,scrH)
    self.currentAudio = currentAudio
    self.fft = {}
    self.smoothFFT = {}
    self.materials = {}
    self.models = {}
    self.particles = {}
    
    self.pi = math.pi
    self.pi2 = math.pi * 2
    
    self.lerp = math.lerp
    self.lowFreq = 0
    
    self.move = 700
    self.move2 = 0
    self.totalMove = 0
    self.totalFrame = 0
    
    
    render.createRenderTarget("myvisualizer.tunnel.camera")
    
    local function insertMdl(controller,modelId,mesh)
        self.models[modelId] = {
            material = controller.mat,
            param = controller.param or {},
            mesh = mesh
        }
    end
    
    self.materials["tunnel"] = material.create("UnlitGeneric")
    self.materials["tunnel"]:setTextureURL("$basetexture","data:image/png;base64," .. http.base64Encode(getScript("lib/myvisualizer_v2/tunnel.data/texture/tunnel baking.png")))
    self.materials["tunnel"]:setInt("$flags", 256+8192)
    
    self.materials["platform"] = material.create("UnlitGeneric")
    self.materials["platform"]:setTextureURL("$basetexture","data:image/png;base64," .. http.base64Encode(getScript("lib/myvisualizer_v2/tunnel.data/texture/platform baking.png")))
    self.materials["platform"]:setInt("$flags", 256+8192)
    
    self.materials["pipe"] = material.create("UnlitGeneric")
    self.materials["pipe"]:setTextureURL("$basetexture","data:image/png;base64," .. http.base64Encode(getScript("lib/myvisualizer_v2/tunnel.data/texture/pipe baking.png")))
    self.materials["pipe"]:setInt("$flags", 256+8192)
    
    self.materials["ring"] = material.create("UnlitGeneric")
    self.materials["ring"]:setTextureURL("$basetexture","data:image/png;base64," .. http.base64Encode(getScript("lib/myvisualizer_v2/tunnel.data/texture/ring baking.png")))
    self.materials["ring"]:setInt("$flags", 256+8192)
    
    self.materials["neon"] = material.create("UnlitGeneric")
    self.materials["neon"]:setTexture("$basetexture","models/debug/debugwhite")
    self.materials["neon"]:setInt("$flags", 256+8192)
    
    self.materials["smoke"] = material.create("UnlitGeneric")
    self.materials["smoke"]:setTextureURL("$basetexture","data:image/png;base64," .. http.base64Encode(getScript("lib/myvisualizer_v2/tunnel.data/texture/smoke.png")))
    self.materials["smoke"]:setInt("$flags", 128+8192)
    self.materials["smoke"]:setFloat("$alpha",0.05)
    
    local meshLib = require("lib/meshlib/mesh_lib.txt")
    local meshController = meshLib:new()
    meshController.mat = self.materials["tunnel"]
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/border_cylinder.obj"))
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/neon_box.obj"))
    meshController:build(insertMdl)
    
    local meshController = meshLib:new()
    meshController.mat = self.materials["pipe"]
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/pipe.obj"))
    meshController:build(insertMdl)
    
    local meshController = meshLib:new()
    meshController:preGenerate(viewVerticesCount)
    meshController.mat = self.materials["platform"]
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/platform.obj"))
    meshController:build(insertMdl)
    
    local meshController = meshLib:new()
    meshController.mat = self.materials["ring"]
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/ring.obj"))
    meshController:build(insertMdl)
    
    local meshController = meshLib:new()
    meshController.mat = self.materials["neon"]
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/neon.obj"))
    meshController:pushObj(getScript("lib/myvisualizer_v2/tunnel.data/model/blue neon.obj"))
    meshController:build(insertMdl)
    
    
    self.planeModel = nil
    local meshController = meshLib:new()
    meshController:pushObj([[o Plane
v -0.500000 0.500000 0.000000
v -0.500000 -0.500000 0.000000
v 0.500000 0.500000 0.000000
v 0.500000 -0.500000 0.000000
vn -0.0000 -0.0000 1.0000
vt 0.000000 0.000000
vt 1.000000 0.000000
vt 1.000000 1.000000
vt 0.000000 1.000000
f 1/1/1 2/2/1 4/3/1 3/4/1]])
    meshController:build(function(controller,modelId,mesh) self.planeModel = mesh end)
    
    timer.create("myvisualizer.tunnel.insertNewParticle",0.1,0,function()
        table.insert(self.particles,{
            pos = Vector(math.random(-400,400),-self.move2 - 150,math.random(-400,400)),
            vel = Vector(math.rand(-0.5,0.5),math.rand(-0.5,0.5),math.rand(-0.5,0.5)),
            lifetime = timer.curtime() + math.random(6,10),
            size = 140 + math.random(0,80),
            color = Color(255,255,255)
        })
    end)
    
    
    return self
end

function tunnel:update(dt)
    self.fft = self.currentAudio.bassObj:getFFT(4)
    
    self.lowFreq = 0
    for i=1, 150 do
        self.smoothFFT[i] = self.lerp(dt * 15,self.smoothFFT[i] or 0,self.fft[i] or 0)
        
        if i <= 10 then self.lowFreq = self.lowFreq + self.smoothFFT[i] end
    end
    self.lowFreq = self.lowFreq / 10
end

function tunnel:renderScreen(x,y,scrW,scrH)
    local dt = timer.frametime()
    self.animationSpeed = dt * 60
    
    local tunnelLength = 10
    local tunnelSize = 700
    local tunnelSize2 = tunnelSize / 2
    
    local size = scrW
    if scrH > size then size = scrH end
    
    local addForce = 3 + self.lowFreq * 70 * self.animationSpeed
    
    self.move = self.move - addForce
    if self.move <= 0 then self.move = 700 end
    
    self.move2 = self.move2 + addForce
    self.totalMove = self.totalMove + (0.2 + self.lowFreq * 3) * self.animationSpeed
    self.totalFrame = self.totalFrame + 1
    
    render.selectRenderTarget("myvisualizer.tunnel.camera")
    render.clear(Color(0,0,0,255),true)
    
    local x2, y2 = math.cos(self.totalMove / 64) * 80, math.sin(self.totalMove / 32) * 80
    local cameraPos = Vector(x2,0,y2)
    local cameraRotation = Angle(y2 / 30,90,-(x2+y2) / 30)
    render.pushViewMatrix({type="3D", bloomtone=false, x=0, y=0, w=1024, h=1024, fov=70, znear=1, zfar=25000, origin=cameraPos, angles=cameraRotation, aspect=1})
    
    render.setFogStart((tunnelLength-10) * tunnelSize)
    render.setFogEnd((tunnelLength-2) * tunnelSize)
    render.setFogDensity(0.75)
    render.setFogColor(Color(30,30,50))
    render.setFogMode(1)
    
    render.suppressEngineLighting(true)
    render.enableDepth(true)
    
    
    // used to allow fog where no objects draw
    render.draw3DBox(Vector(0,(tunnelLength+2) * tunnelSize,0),Angle(),-Vector(tunnelSize,1,tunnelSize),Vector(tunnelSize,1,tunnelSize))
    //
    
    for i=0, tunnelLength - 1 do
        local cam = Matrix()
        cam:translate(Vector(0,-self.move + i * tunnelSize,0))
        cam:scale(Vector(tunnelSize,tunnelSize,tunnelSize) / 2)
        render.pushMatrix(cam)
        
        for id, mdl in pairs(self.models) do
            render.setMaterial(mdl.material)
            mdl.mesh:draw()
        end
        
        render.popMatrix()
    end
    
    // draw ambient particle
    render.setMaterial(self.materials["smoke"])
    for id, part in pairs(self.particles) do
        if timer.curtime() > part.lifetime then table.remove(self.particles, id) continue end
        
        // broken position due to camera movement
        part.pos = part.pos + part.vel
        part.size = part.size + 1
        local normPos = part.pos + Vector(0,self.move2,0)
        
        // sprite direction broken
        //render.draw3DSprite(normPos, part.size, part.size, part.color)
        
        
        local cam = Matrix()
        cam:translate(normPos)
        cam:rotate(cameraRotation + Angle(-90,0,0)) // follow camera rotation
        cam:scale(Vector(1) * part.size)
        render.pushMatrix(cam)
        
        if self.planeModel then self.planeModel:draw() end
        
        render.popMatrix()
    end
    
    render.suppressEngineLighting(false)
    render.enableDepth(false)
    
    render.popViewMatrix()
    render.selectRenderTarget()
    
    render.setRenderTargetTexture("myvisualizer.tunnel.camera")
    render.setColor(Color(255,255,255))
    render.drawTexturedRect(scrW/2 - size/2,scrH/2 - size/2,size,size)
    render.setRenderTargetTexture()
    
    render.enableDepth(false) // reset because it's fuck the ui
end

function tunnel:renderHUD(x,y,scrW,scrH)
end

//executed only when switch to another visualizer
//can be usefull to remove render target
// note: this function are executed before replacing the current visualizer
function tunnel:on_visualizer_switch()
    render.destroyRenderTarget("myvisualizer.tunnel.camera")
    
    self.materials["tunnel"]:destroy()
    self.materials["platform"]:destroy()
    self.materials["pipe"]:destroy()
    self.materials["ring"]:destroy()
    self.materials["neon"]:destroy()
    self.materials["smoke"]:destroy()
    
    self.particles = {} // reset it from memory
end

//
function tunnel:on_song_change()
end

return tunnel